
<head>

	 <title>Surfeit Alpha</title>
  
  <%= stylesheet_link_tag "style", :media => "all" %>
  <link href='http://fonts.googleapis.com/css?family=Economica:700,400italic' rel='stylesheet' type='text/css'>
</head>

<body>
<nav id="site-nav" class="meny">
    <h1><a href="/current">Surfeit</a></h1>
    <h3>Welcome, <%= current_user.name.capitalize %> | <%= link_to 'Sign Out', logout_url, :method => 'delete' %></h3>
  <section id="options">
   <div class="option-combo">

      <ul id="filters">
		  <li><a href="#" data-filter=".facebook"><span class="fbGlowIcon">F</span></a></li>
		  <li><a href="#" data-filter=".twitter"><span class="twitterGlowIcon">L</span></a></li>
		  <li><a href="#" data-filter=".instagram"><span class="instaGlowIcon">D</span></a></li>
	  </ul>

      <br><br>  
      <div class="lower_nav_links">
      <%= link_to 'Manage Networks', authorizations_path %><br>
      <%= link_to 'My Account', users_path %>
      </div>
</section>
      

  </nav> <!-- #site-nav -->
  
  <div class="sliderHex">
  	<span class="tipOff">O</span>
	<div class="slideCube">
		<div class="side top"></div>
		<div class="side right"></div> 	
		<div class="side left"></div>
	</div>
  </div>
  
  <div class="contents">
  
  
  <div id="container" class="super-list variable-sizes clearfix">
    
	
	<div class="blackout"></div>
    <% (@instagram_feed).each do |media| %>
    <div class="element width2 height2 instagram">
    <img src="<%= media.images.first.last.url%>" style="width: 100%; height: 100%">
    <p class="likes"><%= media.likes.first.last%><span class="thumb">b</span></p><br>
    <!--
<p><%= media.user['username'] %></p><br>
      <% if media.caption != nil %>
       <p><%= media.caption.text %></p><br>
      <% end %>
-->
    </div>
    <% end%> 


    <% (@facebook_feed).each do |status| %>
    <% if status['message']%>
      <div class="element width2 facebook">
        <p class="originType">F</p>
        <h3 class="symbol"><%=status["from"]["name"]%></h3><br>
        <h2 class="name"><%=status["message"]%></h2>
        <p><% if status['likes'] != nil%></p>
              <p class="likes"><%= status['likes']['count']%><span class="thumb">b</span></p>
            <%end %>
       <!--  <p class="dateStamp"><%=status["updated_time"] %></p> -->
      </div>
      <% end %>
    <%end%>

   
    <% (@twitter_feed).each do |tweet| %>
    <div class="element twitter width2">
      <p class="originType">L</p>
      <h3 class="symbol"><%= tweet["user"]["name"]%></h3>
      <h2 class="name"> <%= tweet["text"]%></h2>
      <p class="dateStamp"><%= tweet["updated_at"] %></p>
    </div>
    <%end%>

    
  </div>
 
</div> <!-- end content -->
  
  <%= javascript_include_tag "jquery-1.7.1.min" %>
<%= javascript_include_tag "jquery.isotope.min" %>
<%= javascript_include_tag "fake-element" %>
<%= javascript_include_tag "meny.min" %>
<script>
    $(function(){
    var $container = $('#container');
    $container.isotope({
        masonry: {
          columnWidth: 120
        },
        sortBy: 'number',
        getSortData: {
          number: function( $elem ) {
            var number = $elem.hasClass('element') ? 
             $elem.find('.number').text() :
             $elem.attr('data-number');
            return parseInt( number, 10 );
          },
          originType: function( $elem ) {
            var name = $elem.find('.originType'),
                itemText = name.length ? name : $elem;
            return itemText.text();
          }
        }
      });
	
	
      	//Kevin's custom filtering
      	//////////////////////////
      	var theChosen = [];
		
		// filter items when filter link is clicked
		$('#filters a').click(function(){
		var selector = $(this).attr('data-filter');
		if($.inArray(selector, theChosen) == -1){
		  theChosen.push(selector);
		  $(this).addClass('selected');
		  }
		  else{
			  var index = theChosen.indexOf(selector);
			  theChosen.splice(index, 1);
			  $(this).removeClass('selected');
		  }
	
		var selected = '';
		  for (i = 0; i < theChosen.length; i++)
		  {
		  	if (i == (theChosen.length - 1)){
			  	selected = selected + theChosen[i];
			}
			else {
				selected = selected + theChosen[i] + ', ';
			}
		  };
		  if(theChosen.length == 0){
			selected = '*';
		  };
		  
		  $container.isotope({ filter: selected});
		  return false;
		});
      
       $('#prepend a').click(function(){
        var $newEls = $( fakeElement.getGroup() );
        $container
          .prepend( $newEls ).isotope('reloadItems').isotope({ sortBy: 'original-order' })
          // set sort back to symbol for inserting
          .isotope('option', { sortBy: 'symbol' });

        return false;
      });

    
      
      /*
var $optionSets = $('#options .option-set'),
          $optionLinks = $optionSets.find('a');

      $optionLinks.click(function(){
        var $this = $(this);
        // don't proceed if already selected
        if ( $this.hasClass('selected') ) {
          $this.removeClass('selected')
          return false;
        }
        var $optionSet = $this.parents('.option-set');
        
        //mark button as selected
        $this.addClass('selected');
  
        // make option object dynamically, i.e. { filter: '.my-filter-class' }
        var options = {},
            key = $optionSet.attr('data-option-key'),
            value = $this.attr('data-option-value');
        // parse 'false' as false boolean
        value = value === 'false' ? false : value;
        options[ key ] = value;
        if ( key === 'layoutMode' && typeof changeLayoutMode === 'function' ) {
          // changes in layout modes need extra logic
          changeLayoutMode( $this, options )
        } else {
          // otherwise, apply new options
          $container.isotope( options );
        }
        
        return false;
      });
*/
    
   });
   
  </script> 
  <script>
			// Create an instance of Meny
			var meny = Meny.create({
				// The element that will be animated in from off screen
				menuElement: document.querySelector( '.meny' ),

				// The contents that gets pushed aside while Meny is active
				contentsElement: document.querySelector( '.contents' ),

				// [optional] The alignment of the menu (top/right/bottom/left)
				position: Meny.getQuery().p || 'left',

				// [optional] The height of the menu (when using top/bottom position)
				height: 200,

				// [optional] The width of the menu (when using left/right position)
				width: 260,

				// [optional] Distance from mouse (in pixels) when menu should open
				threshold: 40
			});
			
			

			// API Methods:
			// meny.open();
			// meny.close();
			// meny.isOpen();
			
			// Events:
			// meny.addEventListener( 'open', function(){ console.log( 'open' ); } );
			// meny.addEventListener( 'close', function(){ console.log( 'close' ); } );

			// Embed an iframe if a URL is passed in
			if( Meny.getQuery().u && Meny.getQuery().u.match( /^http/gi ) ) {
				var contents = document.querySelector( '.contents' );
				contents.style.padding = '0px';
				contents.innerHTML = '<div class="cover"></div><iframe src="'+ Meny.getQuery().u +'" style="width: 100%; height: 100%; border: 0; position: absolute;"></iframe>';
			}
  </script>

</body>
